---
import Layout from '../../layouts/Layout.astro';
import PostCard from '../../components/PostCard.astro';
import { getCollection } from 'astro:content';

// Obtener todos los artículos del blog desde la colección
const allBlogPosts = await getCollection('blog');

// Ordenar los artículos por fecha de publicación (más recientes primero)
const allPosts = allBlogPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Función para traducir categorías de inglés a español
const translateCategory = (category: string) => {
  switch(category) {
    case 'Politics': return 'Política';
    case 'Design': return 'Diseño';
    case 'Technology': return 'Tecnología';
    case 'Personal': return 'Personal';
    default: return category;
  }
};
---

<Layout title="Blog | cssamurai" description="Pensamientos sobre política, diseño y tecnología por cssamurai">
  <div class="max-w-2xl mb-12">
    <h1 class="text-4xl font-bold mb-4">Blog</h1>
    <p class="text-lg text-primary-700 dark:text-primary-300">
      Explorando las intersecciones de política, diseño y tecnología a través de análisis y comentarios reflexivos.
    </p>
  </div>
  
  <div class="mb-8">
    <div class="flex overflow-x-auto pb-2 -mx-2 space-x-2">
      <a 
        href="/blog" 
        class="inline-flex px-4 py-2 rounded-full bg-accent-600 text-white text-sm font-medium whitespace-nowrap"
      >
        Todos
      </a>
      
      {/* Generar dinámicamente las pills de categorías */}
      {(() => {
        // Obtener todas las categorías únicas
        const uniqueCategories = Array.from(new Set(allPosts.map(post => post.data.category)));
        
        // Ordenar las categorías alfabéticamente antes de mapearlas
        const sortedCategories = [...uniqueCategories].sort((a, b) => {
          const aTranslated = translateCategory(a);
          const bTranslated = translateCategory(b);
          return String(aTranslated).localeCompare(String(bTranslated));
        });
        
        // Mapear cada categoría a su respectiva pill
        return sortedCategories.map(category => {
          const translatedCategory = translateCategory(category);
          const categorySlug = translatedCategory === 'Política' ? 'politica' : 
                              translatedCategory === 'Diseño' ? 'diseno' : 
                              translatedCategory === 'Tecnología' ? 'tecnologia' : 
                              translatedCategory === 'Personal' ? 'personal' : 
                              String(translatedCategory).toLowerCase();
          
          return (
            <a 
              href={`/category/${categorySlug}`} 
              class="inline-flex px-4 py-2 rounded-full bg-white dark:bg-primary-900 border border-primary-200 dark:border-primary-700 text-primary-700 dark:text-primary-300 hover:border-accent-400 dark:hover:border-accent-400 text-sm font-medium whitespace-nowrap transition-colors"
            >
              {translatedCategory}
            </a>
          );
        });
      })()}
    </div>
  </div>
  
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    {allPosts.map(post => (
      <PostCard post={{
        slug: post.slug,
        title: post.data.title,
        description: post.data.description,
        pubDate: post.data.pubDate,
        category: translateCategory(post.data.category),
        image: post.data.image,
        imageOptional: post.data.imageOptional,
        readingTime: post.data.readingTime
      }} />
    ))}
  </div>
</Layout>