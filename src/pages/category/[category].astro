---
import Layout from '../../layouts/Layout.astro';
import PostCard from '../../components/PostCard.astro';
import { getCollection } from 'astro:content';

// Esta función ya no se usa directamente, se usa dentro de getStaticPaths y en el filtrado

export async function getStaticPaths() {
  // Función para traducir categorías de inglés a español (definida dentro de getStaticPaths)
  function translateCategoryInternal(category: string) {
    switch(category) {
      case 'Politics': return 'Política';
      case 'Design': return 'Diseño';
      case 'Technology': return 'Tecnología';
      case 'Personal': return 'Personal';
      default: return category;
    }
  }

  const allBlogPosts = await getCollection('blog');
  
  // Extraer categorías únicas de los artículos
  const categories = new Set();
  allBlogPosts.forEach(post => {
    categories.add(translateCategoryInternal(post.data.category));
  });
  
  return Array.from(categories).map((category: unknown) => {
    const categoryString = String(category);
    const categorySlug = categoryString === 'Política' ? 'politica' : 
                         categoryString === 'Diseño' ? 'diseno' : 
                         categoryString === 'Tecnología' ? 'tecnologia' : 
                         categoryString === 'Personal' ? 'personal' : 
                         categoryString.toLowerCase();
    
    return {
      params: { category: categorySlug },
      props: { category: categoryString },
    };
  });
}

const { category } = Astro.props;

// Obtener todos los artículos del blog
const allBlogPosts = await getCollection('blog');

// Ordenar los artículos por fecha de publicación (más recientes primero)
const sortedPosts = allBlogPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Filtrar posts por categoría
const filteredPosts = sortedPosts.filter(post => {
  // Usar la misma lógica de traducción que en getStaticPaths
  const translatedCategory = (function(cat: string) {
    switch(cat) {
      case 'Politics': return 'Política';
      case 'Design': return 'Diseño';
      case 'Technology': return 'Tecnología';
      case 'Personal': return 'Personal';
      default: return cat;
    }
  })(post.data.category);
  
  return translatedCategory === category;
});
---

<Layout title={`${category} | cssamurai`} description={`Artículos sobre ${category.toLowerCase()} por cssamurai`}>
  <div class="max-w-2xl mb-12">
    <h1 class="text-4xl font-bold mb-4">{category}</h1>
    <p class="text-lg text-primary-700 dark:text-primary-300">
      {category === 'Política' && 'Análisis y comentarios sobre movimientos políticos, políticas y problemas sociales.'}
      {category === 'Diseño' && 'Explorando principios, tendencias y casos de estudio en diseño a través de varios medios.'}
      {category === 'Tecnología' && 'Perspectivas sobre tecnologías emergentes, tendencias digitales y su impacto en la sociedad.'}
      {category === 'Personal' && 'Reflexiones personales, experiencias y pensamientos sobre diversos aspectos de la vida.'}
    </p>
  </div>
  
  <div class="mb-8">
    <div class="flex overflow-x-auto pb-2 -mx-2 space-x-2">
      <a 
        href="/blog" 
        class="inline-flex px-4 py-2 rounded-full bg-white dark:bg-primary-900 border border-primary-200 dark:border-primary-700 text-primary-700 dark:text-primary-300 hover:border-accent-400 dark:hover:border-accent-400 text-sm font-medium whitespace-nowrap transition-colors"
      >
        Todos
      </a>
      
      {/* Generar dinámicamente las pills de categorías */}
      {(() => {
        // Obtener todas las categorías únicas de los posts
        const uniqueCategories = Array.from(new Set(sortedPosts.map(post => post.data.category)));
        
        // Ordenar las categorías alfabéticamente antes de mapearlas
        const sortedCategories = [...uniqueCategories].sort((a, b) => {
          const aTranslated = (function(c) {
            switch(c) {
              case 'Politics': return 'Política';
              case 'Design': return 'Diseño';
              case 'Technology': return 'Tecnología';
              case 'Personal': return 'Personal';
              default: return c;
            }
          })(a);
          
          const bTranslated = (function(c) {
            switch(c) {
              case 'Politics': return 'Política';
              case 'Design': return 'Diseño';
              case 'Technology': return 'Tecnología';
              case 'Personal': return 'Personal';
              default: return c;
            }
          })(b);
          
          return String(aTranslated).localeCompare(String(bTranslated));
        });
        
        // Mapear cada categoría a su respectiva pill
        return sortedCategories.map(cat => {
          // Traducir la categoría al español
          const translatedCat = (function(c) {
            switch(c) {
              case 'Politics': return 'Política';
              case 'Design': return 'Diseño';
              case 'Technology': return 'Tecnología';
              case 'Personal': return 'Personal';
              default: return c;
            }
          })(cat);
          
          // Convertir la categoría a slug
          const catSlug = translatedCat === 'Política' ? 'politica' : 
                         translatedCat === 'Diseño' ? 'diseno' : 
                         translatedCat === 'Tecnología' ? 'tecnologia' : 
                         translatedCat === 'Personal' ? 'personal' : 
                         String(translatedCat).toLowerCase();
          
          // Determinar si esta categoría está activa
          const isActive = category === translatedCat;
          
          return (
            <a 
              href={`/category/${catSlug}`} 
              class={`inline-flex px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${
                isActive 
                  ? 'bg-accent-600 text-white' 
                  : 'bg-white dark:bg-primary-900 border border-primary-200 dark:border-primary-700 text-primary-700 dark:text-primary-300 hover:border-accent-400 dark:hover:border-accent-400 transition-colors'
              }`}
            >
              {translatedCat}
            </a>
          );
        });
        // No ordenamos aquí para evitar errores con props.children
        // En su lugar, ordenamos las categorías antes de mapearlas
      })()}
    </div>
  </div>
  
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    {filteredPosts.map(post => (
      <PostCard post={{
        slug: post.slug,
        title: post.data.title,
        description: post.data.description,
        pubDate: post.data.pubDate,
        category: (function(cat) {
          switch(cat) {
            case 'Politics': return 'Política';
            case 'Design': return 'Diseño';
            case 'Technology': return 'Tecnología';
            default: return cat;
          }
        })(post.data.category),
        image: post.data.image,
        imageOptional: post.data.imageOptional,
        readingTime: post.data.readingTime
      }} />
    ))}
  </div>
</Layout>