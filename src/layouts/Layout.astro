---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { ViewTransitions } from 'astro:transitions';

interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const { 
  title = 'cssamurai', 
  description = 'Thoughts on politics, design, and technology', 
  image = '/images/og-image.jpg' 
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={image} />
    
    <!-- Google Fonts (alternativas a sohne y gt-super) -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <ViewTransitions />

    <script is:inline>
      // Script que se ejecuta inmediatamente para evitar parpadeos
      const theme = localStorage.getItem('theme') || 'light';
      document.documentElement.classList.toggle('dark', theme === 'dark');
      window.localStorage.setItem('theme', theme);
    </script>

    <style is:global>
      article, .prose {
        font-family: 'Inter', 'Helvetica Neue', Arial, sans-serif;
        font-size: 20px;
        line-height: 1.8;
        letter-spacing: -0.003em;
      }
      
      article p, .prose p {
        margin-bottom: 1.2em; /* Más espacio entre párrafos */
      }
      
      article h1, article h2, article h3, .prose h1, .prose h2, .prose h3 {
        font-family: 'Lora', Georgia, Cambria, "Times New Roman", Times, serif;
        letter-spacing: -0.015em;
      }
      
      article h2, .prose h2 {
        font-weight: 700; /* Negrita para los H2 */
        margin-top: 0.2em; /* Más espacio arriba */
        margin-bottom: 0.2em; /* Más espacio abajo */
        font-size: 1.2em; /* Tamaño ligeramente mayor */
      }
      
      article h3, .prose h3 {
        font-weight: 700; /* Negrita para los H3 */
        margin-top: 0.2em;
        margin-bottom: 0.2em;
        font-size: 1.1em;
      }
    </style>
  </head>
  <body class="font-sans antialiased bg-white dark:bg-primary-950 text-primary-950 dark:text-primary-50 min-h-screen flex flex-col transition-colors duration-300">
    <Header />
    <main class="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8 animate-fade-in">
      <slot />
    </main>
    <Footer />
    
    <script>
      // Esta función se ejecuta en cada transición de página
      document.addEventListener('astro:page-load', () => {
        // Aplicar el tema guardado en localStorage en cada carga de página
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.classList.toggle('dark', savedTheme === 'dark');
        
        // Configurar el botón de cambio de tema
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
          themeToggle.addEventListener('click', () => {
            const isDark = document.documentElement.classList.toggle('dark');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
          });
        }
      });
      
      // Asegurarse de que el tema se mantenga durante las transiciones
      document.addEventListener('astro:after-swap', () => {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.classList.toggle('dark', savedTheme === 'dark');
      });
    </script>
  </body>
</html>